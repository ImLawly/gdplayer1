{"version":3,"file":"p2p-media-loader-hlsjs.es.js","sources":["../src/utils.ts","../src/fragment-loader.ts","../src/playlist-loader.ts","../src/segment-mananger.ts","../src/engine-static.ts","../src/engine.ts"],"sourcesContent":["import { ByteRange } from \"p2p-media-loader-core\";\n\nexport function getSegmentRuntimeId(\n  segmentRequestUrl: string,\n  byteRange?: ByteRange,\n) {\n  if (!byteRange) return segmentRequestUrl;\n  return `${segmentRequestUrl}|${byteRange.start}-${byteRange.end}`;\n}\n\nexport function getByteRange(\n  rangeStart: number | undefined,\n  rangeEnd: number | undefined,\n): ByteRange | undefined {\n  if (\n    rangeStart !== undefined &&\n    rangeEnd !== undefined &&\n    rangeStart <= rangeEnd\n  ) {\n    return { start: rangeStart, end: rangeEnd };\n  }\n}\n","import type {\n  FragmentLoaderContext,\n  HlsConfig,\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderStats,\n} from \"hls.js\";\nimport * as Utils from \"./utils.js\";\nimport { Core, SegmentResponse, CoreRequestError } from \"p2p-media-loader-core\";\n\nconst DEFAULT_DOWNLOAD_LATENCY = 10;\n\nexport class FragmentLoaderBase implements Loader<FragmentLoaderContext> {\n  context!: FragmentLoaderContext;\n  config!: LoaderConfiguration | null;\n  stats: LoaderStats;\n  #callbacks!: LoaderCallbacks<FragmentLoaderContext> | null;\n  #createDefaultLoader: () => Loader<LoaderContext>;\n  #defaultLoader?: Loader<LoaderContext>;\n  #core: Core;\n  #response?: SegmentResponse;\n  #segmentId?: string;\n\n  constructor(config: HlsConfig, core: Core) {\n    this.#core = core;\n    this.#createDefaultLoader = () => new config.loader(config);\n    this.stats = {\n      aborted: false,\n      chunkCount: 0,\n      loading: { start: 0, first: 0, end: 0 },\n      buffering: { start: 0, first: 0, end: 0 },\n      parsing: { start: 0, end: 0 },\n      // set total and loaded to 1 to prevent hls.js\n      // on progress loading monitoring in AbrController\n      total: 1,\n      loaded: 1,\n      bwEstimate: 0,\n      retry: 0,\n    };\n  }\n\n  load(\n    context: FragmentLoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<LoaderContext>,\n  ) {\n    this.context = context;\n    this.config = config;\n    this.#callbacks = callbacks;\n    const { stats } = this;\n\n    const { rangeStart: start, rangeEnd: end } = context;\n    const byteRange = Utils.getByteRange(\n      start,\n      end !== undefined ? end - 1 : undefined,\n    );\n\n    this.#segmentId = Utils.getSegmentRuntimeId(context.url, byteRange);\n    const isSegmentDownloadableByP2PCore = this.#core.isSegmentLoadable(\n      this.#segmentId,\n    );\n\n    if (\n      !this.#core.hasSegment(this.#segmentId) ||\n      !isSegmentDownloadableByP2PCore\n    ) {\n      this.#defaultLoader = this.#createDefaultLoader();\n      this.#defaultLoader.stats = this.stats;\n      this.#defaultLoader.load(context, config, callbacks);\n      return;\n    }\n\n    const onSuccess = (response: SegmentResponse) => {\n      this.#response = response;\n      const loadedBytes = this.#response.data.byteLength;\n      stats.loading = getLoadingStat(\n        this.#response.bandwidth,\n        loadedBytes,\n        performance.now(),\n      );\n      stats.total = loadedBytes;\n      stats.loaded = loadedBytes;\n\n      if (callbacks.onProgress) {\n        callbacks.onProgress(\n          this.stats,\n          context,\n          this.#response.data,\n          undefined,\n        );\n      }\n      callbacks.onSuccess(\n        { data: this.#response.data, url: context.url },\n        this.stats,\n        context,\n        undefined,\n      );\n    };\n\n    const onError = (error: unknown) => {\n      if (\n        error instanceof CoreRequestError &&\n        error.type === \"aborted\" &&\n        this.stats.aborted\n      ) {\n        return;\n      }\n      this.#handleError(error);\n    };\n\n    void this.#core.loadSegment(this.#segmentId, { onSuccess, onError });\n  }\n\n  #handleError(thrownError: unknown) {\n    const error = { code: 0, text: \"\" };\n    if (\n      thrownError instanceof CoreRequestError &&\n      thrownError.type === \"failed\"\n    ) {\n      // error.code = thrownError.code;\n      error.text = thrownError.message;\n    } else if (thrownError instanceof Error) {\n      error.text = thrownError.message;\n    }\n    this.#callbacks?.onError(error, this.context, null, this.stats);\n  }\n\n  #abortInternal() {\n    if (!this.#response && this.#segmentId) {\n      this.stats.aborted = true;\n      this.#core.abortSegmentLoading(this.#segmentId);\n    }\n  }\n\n  abort() {\n    if (this.#defaultLoader) {\n      this.#defaultLoader.abort();\n    } else {\n      this.#abortInternal();\n      this.#callbacks?.onAbort?.(this.stats, this.context, {});\n    }\n  }\n\n  destroy() {\n    if (this.#defaultLoader) {\n      this.#defaultLoader.destroy();\n    } else {\n      if (!this.stats.aborted) this.#abortInternal();\n      this.#callbacks = null;\n      this.config = null;\n    }\n  }\n}\n\nfunction getLoadingStat(\n  targetBitrate: number,\n  loadedBytes: number,\n  loadingEndTime: number,\n) {\n  const timeForLoading = (loadedBytes * 8000) / targetBitrate;\n  const first = loadingEndTime - timeForLoading;\n  const start = first - DEFAULT_DOWNLOAD_LATENCY;\n\n  return { start, first, end: loadingEndTime };\n}\n","import {\n  HlsConfig,\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderStats,\n  PlaylistLoaderContext,\n} from \"hls.js\";\n\nexport class PlaylistLoaderBase implements Loader<PlaylistLoaderContext> {\n  #defaultLoader: Loader<LoaderContext>;\n  context: PlaylistLoaderContext;\n  stats: LoaderStats;\n\n  constructor(config: HlsConfig) {\n    this.#defaultLoader = new config.loader(config);\n    this.stats = this.#defaultLoader.stats;\n    this.context = this.#defaultLoader.context as PlaylistLoaderContext;\n  }\n\n  load(\n    context: LoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<LoaderContext>,\n  ) {\n    this.#defaultLoader.load(context, config, callbacks);\n  }\n\n  abort() {\n    this.#defaultLoader.abort();\n  }\n\n  destroy() {\n    this.#defaultLoader.destroy();\n  }\n}\n","import * as Utils from \"./utils.js\";\nimport type {\n  ManifestLoadedData,\n  LevelUpdatedData,\n  AudioTrackLoadedData,\n} from \"hls.js\";\nimport { Core, Segment } from \"p2p-media-loader-core\";\n\nexport class SegmentManager {\n  core: Core;\n\n  constructor(core: Core) {\n    this.core = core;\n  }\n\n  processMainManifest(data: ManifestLoadedData) {\n    const { levels, audioTracks } = data;\n    // in the case of audio only stream it is stored in levels\n\n    for (const [index, level] of levels.entries()) {\n      const { url } = level;\n      this.core.addStreamIfNoneExists({\n        runtimeId: Array.isArray(url) ? (url as string[])[0] : url,\n        type: \"main\",\n        index,\n      });\n    }\n\n    for (const [index, track] of audioTracks.entries()) {\n      const { url } = track;\n      this.core.addStreamIfNoneExists({\n        runtimeId: Array.isArray(url) ? (url as string[])[0] : url,\n        type: \"secondary\",\n        index,\n      });\n    }\n  }\n\n  updatePlaylist(data: LevelUpdatedData | AudioTrackLoadedData) {\n    const {\n      details: { url, fragments, live },\n    } = data;\n\n    const playlist = this.core.getStream(url);\n    if (!playlist) return;\n\n    const segmentToRemoveIds = new Set(playlist.segments.keys());\n    const newSegments: Segment[] = [];\n    fragments.forEach((fragment, index) => {\n      const {\n        url: responseUrl,\n        byteRange: fragByteRange,\n        sn,\n        start: startTime,\n        end: endTime,\n      } = fragment;\n      if (sn === \"initSegment\") return;\n\n      const [start, end] = fragByteRange;\n      const byteRange = Utils.getByteRange(\n        start,\n        end !== undefined ? end - 1 : undefined,\n      );\n      const runtimeId = Utils.getSegmentRuntimeId(responseUrl, byteRange);\n      segmentToRemoveIds.delete(runtimeId);\n\n      if (playlist.segments.has(runtimeId)) return;\n      newSegments.push({\n        runtimeId,\n        url: responseUrl,\n        externalId: live ? sn : index,\n        byteRange,\n        startTime,\n        endTime,\n      });\n    });\n\n    if (!newSegments.length && !segmentToRemoveIds.size) return;\n    this.core.updateStream(url, newSegments, segmentToRemoveIds.values());\n  }\n}\n","import {\n  HlsJsP2PEngine,\n  PartialHlsJsP2PEngineConfig,\n  HlsWithP2PInstance,\n  HlsWithP2PConfig,\n} from \"./engine.js\";\n\nexport function injectMixin<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  HlsJsConstructor extends new (...args: any[]) => any,\n>(HlsJsClass: HlsJsConstructor) {\n  return class HlsJsWithP2PClass extends HlsJsClass {\n    #p2pEngine: HlsJsP2PEngine;\n\n    get p2pEngine() {\n      return this.#p2pEngine;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(...args: any[]) {\n      const config = args[0] as\n        | ({\n            p2p?: PartialHlsJsP2PEngineConfig & {\n              onHlsJsCreated?: (hls: InstanceType<HlsJsConstructor>) => void;\n            };\n          } & Record<string, unknown>)\n        | undefined;\n\n      const { p2p, ...hlsJsConfig } = config ?? {};\n\n      const p2pEngine = new HlsJsP2PEngine(p2p);\n\n      super({ ...hlsJsConfig, ...p2pEngine.getConfigForHlsJs() });\n\n      p2pEngine.bindHls(this);\n\n      this.#p2pEngine = p2pEngine;\n      p2p?.onHlsJsCreated?.(this as InstanceType<HlsJsConstructor>);\n    }\n  } as new (\n    config?: HlsWithP2PConfig<HlsJsConstructor>,\n  ) => HlsWithP2PInstance<InstanceType<HlsJsConstructor>>;\n}\n","import type Hls from \"hls.js\";\nimport type {\n  AudioTrackLoadedData,\n  LevelUpdatedData,\n  ManifestLoadedData,\n  LevelSwitchingData,\n  PlaylistLevelType,\n  HlsConfig,\n  Events,\n} from \"hls.js\";\nimport { FragmentLoaderBase } from \"./fragment-loader.js\";\nimport { PlaylistLoaderBase } from \"./playlist-loader.js\";\nimport { SegmentManager } from \"./segment-mananger.js\";\nimport {\n  CoreConfig,\n  Core,\n  CoreEventMap,\n  DynamicCoreConfig,\n  debug,\n  DefinedCoreConfig,\n} from \"p2p-media-loader-core\";\nimport { injectMixin } from \"./engine-static.js\";\n\n/** Represents the complete configuration for HlsJsP2PEngine. */\nexport type HlsJsP2PEngineConfig = {\n  /** Complete core configuration settings. */\n  core: DefinedCoreConfig;\n};\n\n/** Allows for partial configuration of HlsJsP2PEngine, useful for providing overrides or partial updates. */\nexport type PartialHlsJsP2PEngineConfig = Partial<\n  Omit<HlsJsP2PEngineConfig, \"core\">\n> & {\n  /** Partial core config */\n  core?: Partial<CoreConfig>;\n};\n\n/** Type for specifying dynamic configuration options that can be changed at runtime for the P2P engine's core. */\nexport type DynamicHlsJsP2PEngineConfig = {\n  /** Dynamic core config */\n  core?: DynamicCoreConfig;\n};\n\n/**\n * Extends a generic HLS type to include the P2P engine, integrating P2P capabilities directly into the HLS instance.\n * @template HlsType The base HLS type that is being extended.\n */\nexport type HlsWithP2PInstance<HlsType> = HlsType & {\n  /** HlsJsP2PEngine instance */\n  readonly p2pEngine: HlsJsP2PEngine;\n};\n\n/**\n * Configuration type for HLS instances that includes P2P settings, augmenting standard HLS configuration with P2P capabilities.\n * @template HlsType A constructor type that produces an HLS instance.\n */\nexport type HlsWithP2PConfig<HlsType extends abstract new () => unknown> =\n  ConstructorParameters<HlsType>[0] & {\n    p2p?: PartialHlsJsP2PEngineConfig & {\n      onHlsJsCreated?: (hls: HlsWithP2PInstance<HlsType>) => void;\n    };\n  };\n\n/**\n * Represents a P2P (peer-to-peer) engine for HLS (HTTP Live Streaming) to enhance media streaming efficiency.\n * This class integrates P2P technologies into HLS.js, enabling the distribution of media segments via a peer network\n * alongside traditional HTTP fetching. It reduces server bandwidth costs and improves scalability by sharing the load\n * across multiple clients.\n *\n * The engine manages core functionalities such as segment fetching, segment management, peer connection management,\n * and event handling related to the P2P and HLS processes.\n *\n * @example\n * // Creating an instance of HlsJsP2PEngine with custom configuration\n * const hlsP2PEngine = new HlsJsP2PEngine({\n *   core: {\n *     highDemandTimeWindow: 30, // 30 seconds\n *     simultaneousHttpDownloads: 3,\n *     webRtcMaxMessageSize: 64 * 1024, // 64 KB\n *     p2pNotReceivingBytesTimeoutMs: 10000, // 10 seconds\n *     p2pInactiveLoaderDestroyTimeoutMs: 15000, // 15 seconds\n *     httpNotReceivingBytesTimeoutMs: 8000, // 8 seconds\n *     httpErrorRetries: 2,\n *     p2pErrorRetries: 2,\n *     announceTrackers: [\"wss://personal.tracker.com\"],\n *     rtcConfig: {\n *       iceServers: [{ urls: \"stun:personal.stun.com\" }]\n *     },\n *     swarmId: \"example-swarm-id\"\n *   }\n * });\n *\n */\nexport class HlsJsP2PEngine {\n  private readonly core: Core;\n  private readonly segmentManager: SegmentManager;\n  private hlsInstanceGetter?: () => Hls;\n  private currentHlsInstance?: Hls;\n  private readonly debug = debug(\"p2pml-hlsjs:engine\");\n\n  /**\n   * Enhances a given Hls.js class by injecting additional P2P (peer-to-peer) functionalities.\n   *\n   * @returns {HlsWithP2PInstance} - The enhanced Hls.js class with P2P functionalities.\n   *\n   * @example\n   * const HlsWithP2P = HlsJsP2PEngine.injectMixin(Hls);\n   *\n   * const hls = new HlsWithP2P({\n   *   // Hls.js configuration\n   *   startLevel: 0, // Example of Hls.js config parameter\n   *   p2p: {\n   *     core: {\n   *       // P2P core configuration\n   *     },\n   *     onHlsJsCreated(hls) {\n   *       // Do something with the Hls.js instance\n   *     },\n   *   },\n   * });\n   */\n  static injectMixin(hls: typeof Hls) {\n    return injectMixin(hls);\n  }\n\n  /**\n   * Constructs an instance of HlsJsP2PEngine.\n   * @param config Optional configuration for P2P engine setup.\n   */\n  constructor(config?: PartialHlsJsP2PEngineConfig) {\n    this.core = new Core(config?.core);\n    this.segmentManager = new SegmentManager(this.core);\n  }\n\n  /**\n   * Adds an event listener for the specified event.\n   * @param eventName The name of the event to listen for.\n   * @param listener The callback function to be invoked when the event is triggered.\n   *\n   * @example\n   * // Listening for a segment being successfully loaded\n   * p2pEngine.addEventListener('onSegmentLoaded', (details) => {\n   *   console.log('Segment Loaded:', details);\n   * });\n   *\n   * @example\n   * // Handling segment load errors\n   * p2pEngine.addEventListener('onSegmentError', (errorDetails) => {\n   *   console.error('Error loading segment:', errorDetails);\n   * });\n   *\n   * @example\n   * // Tracking data downloaded from peers\n   * p2pEngine.addEventListener('onChunkDownloaded', (bytesLength, downloadSource, peerId) => {\n   *   console.log(`Downloaded ${bytesLength} bytes from ${downloadSource} ${peerId ? 'from peer ' + peerId : 'from server'}`);\n   * });\n   */\n  addEventListener<K extends keyof CoreEventMap>(\n    eventName: K,\n    listener: CoreEventMap[K],\n  ) {\n    this.core.addEventListener(eventName, listener);\n  }\n\n  /**\n   * Removes an event listener for the specified event.\n   * @param eventName The name of the event.\n   * @param listener The callback function that was previously added.\n   */\n  removeEventListener<K extends keyof CoreEventMap>(\n    eventName: K,\n    listener: CoreEventMap[K],\n  ) {\n    this.core.removeEventListener(eventName, listener);\n  }\n\n  /**\n   * provides the Hls.js P2P specific configuration for Hls.js loaders.\n   * @returns An object with fragment loader (fLoader) and playlist loader (pLoader).\n   */\n  getConfigForHlsJs(): { fLoader: unknown; pLoader: unknown } {\n    return {\n      fLoader: this.createFragmentLoaderClass(),\n      pLoader: this.createPlaylistLoaderClass(),\n    };\n  }\n\n  /**\n   * Returns the configuration of the HLS.js P2P engine.\n   * @returns A readonly version of the HlsJsP2PEngineConfig.\n   */\n  getConfig(): HlsJsP2PEngineConfig {\n    return { core: this.core.getConfig() };\n  }\n\n  /**\n   * Applies dynamic configuration updates to the P2P engine.\n   * @param dynamicConfig Configuration changes to apply.\n   *\n   * @example\n   * // Assuming `hlsP2PEngine` is an instance of HlsJsP2PEngine\n   *\n   * const newDynamicConfig = {\n   *   core: {\n   *     // Increase the number of cached segments to 1000\n   *     cachedSegmentsCount: 1000,\n   *     // 50 minutes of segments will be downloaded further through HTTP connections if P2P fails\n   *     httpDownloadTimeWindow: 3000,\n   *     // 100 minutes of segments will be downloaded further through P2P connections\n   *     p2pDownloadTimeWindow: 6000,\n   * };\n   *\n   * hlsP2PEngine.applyDynamicConfig(newDynamicConfig);\n   */\n  applyDynamicConfig(dynamicConfig: DynamicHlsJsP2PEngineConfig) {\n    if (dynamicConfig.core) this.core.applyDynamicConfig(dynamicConfig.core);\n  }\n\n  /**\n   * Sets the HLS instance for handling media.\n   * @param hls The HLS instance or a function that returns an HLS instance.\n   */\n  bindHls<T = unknown>(hls: T | (() => T)) {\n    this.hlsInstanceGetter =\n      typeof hls === \"function\" ? (hls as () => Hls) : () => hls as Hls;\n  }\n\n  private initHlsEvents() {\n    const hlsInstance = this.hlsInstanceGetter?.();\n    if (this.currentHlsInstance === hlsInstance) return;\n    if (this.currentHlsInstance) this.destroy();\n    this.currentHlsInstance = hlsInstance;\n    this.updateHlsEventsHandlers(\"register\");\n    this.updateMediaElementEventHandlers(\"register\");\n  }\n\n  private updateHlsEventsHandlers(type: \"register\" | \"unregister\") {\n    const hls = this.currentHlsInstance;\n    if (!hls) return;\n    const method = type === \"register\" ? \"on\" : \"off\";\n\n    hls[method](\n      \"hlsManifestLoaded\" as Events.MANIFEST_LOADED,\n      this.handleManifestLoaded,\n    );\n    hls[method](\n      \"hlsLevelSwitching\" as Events.LEVEL_SWITCHING,\n      this.handleLevelSwitching,\n    );\n    hls[method](\n      \"hlsLevelUpdated\" as Events.LEVEL_UPDATED,\n      this.handleLevelUpdated,\n    );\n    hls[method](\n      \"hlsAudioTrackLoaded\" as Events.AUDIO_TRACK_LOADED,\n      this.handleLevelUpdated,\n    );\n    hls[method](\"hlsDestroying\" as Events.DESTROYING, this.destroy);\n    hls[method](\n      \"hlsMediaAttaching\" as Events.MEDIA_ATTACHING,\n      this.destroyCore,\n    );\n    hls[method](\n      \"hlsManifestLoading\" as Events.MANIFEST_LOADING,\n      this.destroyCore,\n    );\n    hls[method](\n      \"hlsMediaDetached\" as Events.MEDIA_DETACHED,\n      this.handleMediaDetached,\n    );\n    hls[method](\n      \"hlsMediaAttached\" as Events.MEDIA_ATTACHED,\n      this.handleMediaAttached,\n    );\n  }\n\n  private updateMediaElementEventHandlers = (\n    type: \"register\" | \"unregister\",\n  ) => {\n    const media = this.currentHlsInstance?.media;\n    if (!media) return;\n    const method =\n      type === \"register\" ? \"addEventListener\" : \"removeEventListener\";\n    media[method](\"timeupdate\", this.handlePlaybackUpdate);\n    media[method](\"seeking\", this.handlePlaybackUpdate);\n    media[method](\"ratechange\", this.handlePlaybackUpdate);\n  };\n\n  private handleManifestLoaded = (event: string, data: ManifestLoadedData) => {\n    // eslint-disable-next-line prefer-destructuring\n    const networkDetails: unknown = data.networkDetails;\n    if (networkDetails instanceof XMLHttpRequest) {\n      this.core.setManifestResponseUrl(networkDetails.responseURL);\n    } else if (networkDetails instanceof Response) {\n      this.core.setManifestResponseUrl(networkDetails.url);\n    }\n    this.segmentManager.processMainManifest(data);\n  };\n\n  private handleLevelSwitching = (event: string, data: LevelSwitchingData) => {\n    if (data.bitrate) this.core.setActiveLevelBitrate(data.bitrate);\n  };\n\n  private handleLevelUpdated = (\n    event: string,\n    data: LevelUpdatedData | AudioTrackLoadedData,\n  ) => {\n    if (\n      this.currentHlsInstance &&\n      this.currentHlsInstance.config.liveSyncDurationCount !==\n        data.details.fragments.length - 1 &&\n      data.details.live &&\n      data.details.fragments[0].type === (\"main\" as PlaylistLevelType) &&\n      !this.currentHlsInstance.userConfig.liveSyncDuration &&\n      !this.currentHlsInstance.userConfig.liveSyncDurationCount &&\n      data.details.fragments.length > 4\n    ) {\n      this.debug(\n        `set liveSyncDurationCount ${data.details.fragments.length - 1}`,\n      );\n      this.currentHlsInstance.config.liveSyncDurationCount =\n        data.details.fragments.length - 1;\n    }\n\n    this.core.setIsLive(data.details.live);\n    this.segmentManager.updatePlaylist(data);\n  };\n\n  private handleMediaAttached = () => {\n    this.updateMediaElementEventHandlers(\"register\");\n  };\n\n  private handleMediaDetached = () => {\n    this.updateMediaElementEventHandlers(\"unregister\");\n  };\n\n  private handlePlaybackUpdate = (event: Event) => {\n    const media = event.target as HTMLMediaElement;\n    this.core.updatePlayback(media.currentTime, media.playbackRate);\n  };\n\n  private destroyCore = () => this.core.destroy();\n\n  /** Clean up and release all resources. Unregister all event handlers. */\n  destroy = () => {\n    this.destroyCore();\n    this.updateHlsEventsHandlers(\"unregister\");\n    this.updateMediaElementEventHandlers(\"unregister\");\n    this.currentHlsInstance = undefined;\n  };\n\n  private createFragmentLoaderClass() {\n    const { core } = this;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const engine = this;\n\n    return class FragmentLoader extends FragmentLoaderBase {\n      constructor(config: HlsConfig) {\n        super(config, core);\n      }\n\n      static getEngine() {\n        return engine;\n      }\n    };\n  }\n\n  private createPlaylistLoaderClass() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const engine = this;\n    return class PlaylistLoader extends PlaylistLoaderBase {\n      constructor(config: HlsConfig) {\n        super(config);\n        engine.initHlsEvents();\n      }\n    };\n  }\n}\n"],"names":["Utils.getByteRange","Utils.getSegmentRuntimeId","_defaultLoader","_a"],"mappings":"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"}